diff --git a/plugins/operation_types/base.class.php b/plugins/operation_types/base.class.php
index 968921f..b263d66 100644
--- a/plugins/operation_types/base.class.php
+++ b/plugins/operation_types/base.class.php
@@ -49,8 +49,12 @@ abstract class ViewsBulkOperationsBaseOperation {
    *   An array of information about the operation.
    * @param $adminOptions
    *   An array of options set by the admin.
+   * @param $adminOptions
+   *   An array of options set by the admin.
+   * @param $operationField
+   *   The field the operation is requested from
    */
-  public function __construct($operationId, $entityType, array $operationInfo, array $adminOptions) {
+  public function __construct($operationId, $entityType, array $operationInfo, array $adminOptions, $operationsField) {
     $this->operationId = $operationId;
     $this->entityType = $entityType;
     $this->operationInfo = $operationInfo;
diff --git a/plugins/operation_types/rules_component.class.php b/plugins/operation_types/rules_component.class.php
index 624c850..d7ed375 100644
--- a/plugins/operation_types/rules_component.class.php
+++ b/plugins/operation_types/rules_component.class.php
@@ -9,6 +9,76 @@
 class ViewsBulkOperationsRulesComponent extends ViewsBulkOperationsBaseOperation {
 
   /**
+   * Contains the provided parameters.
+   *
+   * @var object
+   */
+  protected $providedParameters;
+
+  /**
+   * Contains the availible options for tokens.
+   *
+   * @var object
+   */
+  protected $tokenOptions;
+
+  /**
+   * Constructs an operation object.
+   *
+   * @param $operationId
+   *   The id of the operation.
+   * @param $entityType
+   *   The entity type that the operation is operating on.
+   * @param $operationInfo
+   *   An array of information about the operation.
+   * @param $adminOptions
+   *   An array of options set by the admin.
+   * @param $adminOptions
+   *   An array of options set by the admin.
+   * @param $operationField
+   *   The field the operation is requested from
+   */
+  public function __construct($operationId, $entityType, array $operationInfo, array $adminOptions, $operationsField) {
+    parent::__construct($operationId, $entityType, $operationInfo, $adminOptions, $operationsField);
+
+    // Get list of the available fields and arguments for token replacement.
+    $tokenOptions = array('' => t('None'));
+    $count = 0; // This lets us prepare the key as we want it printed.
+    foreach ($operationsField->view->display_handler->get_handlers('argument') as $arg => $handler) {
+      $tokenOptions['!' . ++$count] = t('@argument input', array('@argument' => $handler->ui_name()));
+    }
+    $this->tokenOptions = $tokenOptions;
+
+    // Store this operations provided parameters
+    $this->providedParameters = $this->getAdminOption('parameters', array());
+    array_walk($this->providedParameters, function(&$value, $key, $operationsField) {
+      $fake_item = array(
+        'alter_text' => TRUE,
+        'text' => $value,
+      );
+      $operationsField->view->row_index = 0;
+      $tokens = $operationsField->get_render_tokens($fake_item);
+      $value = strip_tags($operationsField->render_altered($fake_item, $tokens));
+      $value = trim($value);
+    }, $operationsField);
+    $this->providedParameters = array_filter($this->providedParameters);
+  }
+
+  /**
+   * Returns the parameters provided for this operation.
+   */
+  public function getProvidedParameters() {
+    return $this->providedParameters;
+  }
+
+  /**
+   * Returns the available options for adminOptionsForm.
+   */
+  public function getTokenOptions() {
+    return $this->tokenOptions;
+  }
+
+  /**
    * Returns the access bitmask for the operation, used for entity access checks.
    *
    * Rules has its own permission system, so the lowest bitmask is enough.
@@ -18,6 +88,30 @@ class ViewsBulkOperationsRulesComponent extends ViewsBulkOperationsBaseOperation
   }
 
   /**
+   * Returns whether the operation is configurable. Used to determine
+   * whether the operation's form methods should be invoked.
+   */
+  public function configurable() {
+    if ($this->getAdminOption('provide_parameters', FALSE)) {
+      $action = rules_action('component_' . $this->operationInfo['key']);
+
+      $parameterInfo = $action->parameterInfo();
+      $parameterInfo = array_splice($parameterInfo, 1);
+
+      $primitiveParameters = array_filter($parameterInfo, function($value) {
+        return in_array($value['type'], array('decimal', 'integer', 'text'));
+      });
+
+      $providedParameters = $this->getProvidedParameters();
+      if (count($parameterInfo) > 0 && count($parameterInfo) <= count($primitiveParameters) &&
+          count($primitiveParameters) <= count(array_filter($providedParameters))) {
+        return FALSE;
+      }
+    }
+    return parent::configurable();
+  }
+
+  /**
    * Returns whether the provided account has access to execute the operation.
    *
    * @param $account
@@ -49,8 +143,18 @@ class ViewsBulkOperationsRulesComponent extends ViewsBulkOperationsBaseOperation
     // The component action is wrapped in an action set using the entity, so
     // that the action configuration form can make use of the entity e.g. for
     // tokens.
-    $set = rules_action_set(array($entity_key => array('type' => $entity_type, 'label' => $info['label'])));
-    $action = rules_action('component_' . $this->operationInfo['key'], array($entity_key . ':select' => $entity_key));
+    $set_parameters = array($entity_key => array('type' => $entity_type, 'label' => $info['label']));
+    $action_parameters = array($entity_key . ':select' => $entity_key);
+    if ($this->getAdminOption('provide_parameters', FALSE)) {
+      $providedParameters = $this->getProvidedParameters();
+      foreach ($providedParameters as $providedParameter => $providedParameterValue) {
+        list($providedParameterKey, $providedParameterType) = explode(':', $providedParameter);
+        $set_parameters[$providedParameterKey] = array('type' => $providedParameterType, 'label' => $providedParameterKey);
+        $action_parameters[$providedParameterKey . ':select'] = $providedParameterKey;
+      }
+    }
+    $set = rules_action_set($set_parameters);
+    $action = rules_action('component_' . $this->operationInfo['key'], $action_parameters);
     $set->action($action);
 
     // Embed the form of the component action, but default to "input" mode for
@@ -64,6 +168,14 @@ class ViewsBulkOperationsRulesComponent extends ViewsBulkOperationsBaseOperation
     // should just use the passed in entity.
     unset($form['parameter'][$entity_key]);
 
+    // Remove any provided parameters, as they should also use the passed in entities
+    if ($this->getAdminOption('provide_parameters', FALSE)) {
+      foreach ($providedParameters as $providedParameter => $providedParameterValue) {
+        list($providedParameterKey, $providedParameterType) = explode(':', $providedParameter);
+        unset($form['parameter'][$providedParameterKey]);
+      }
+    }
+
     // Tweak direct input forms to be more end-user friendly.
     foreach ($action->parameterInfo() as $name => $info) {
       // Remove the fieldset and move its title to the form element.
@@ -108,6 +220,76 @@ class ViewsBulkOperationsRulesComponent extends ViewsBulkOperationsBaseOperation
   }
 
   /**
+   * Returns the admin options form for the operation.
+   *
+   * The admin options form is embedded into the VBO field settings and used
+   * to configure operation behavior. The options can later be fetched
+   * through the getAdminOption() method.
+   *
+   * @param $dom_id
+   *   The dom path to the level where the admin options form is embedded.
+   *   Needed for #dependency.
+   * @param $field_handler
+   *   The Views field handler object for the VBO field.
+   */
+  public function adminOptionsForm($dom_id, $field_handler) {
+    $form = parent::adminOptionsForm($dom_id, $field_handler);
+
+    $entity_key = $this->operationInfo['parameters']['entity_key'];
+    $entity_type = $this->entityType;
+    $info = entity_get_info($this->entityType);
+
+    $action = rules_action('component_' . $this->operationInfo['key'], array($entity_key . ':select' => $entity_key));
+
+    $parameterInfo = $action->parameterInfo();
+    $primitiveParameters = array_filter($parameterInfo, function($value) {
+      return in_array($value['type'], array('decimal', 'integer', 'text'));
+    });
+
+    if (count($parameterInfo) > 0 && count($parameterInfo) == count($primitiveParameters)) {
+
+      $provide_parameters = $this->getAdminOption('provide_parameters', FALSE);
+      $parameters = $this->getAdminOption('parameters', FALSE);
+    
+      $form['provide_parameters'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Provide parameters'),
+        '#default_value' => $provide_parameters,
+        '#dependency' => array(
+          $dom_id . '-selected' => array(1),
+        ),
+        '#dependency_count' => 1,
+      );
+      $form['parameters'] = array(
+        '#type' => 'container',
+        '#dependency' => array(
+          $dom_id . '-selected' => array(1),
+          $dom_id . '-provide-parameters' => array(1),
+        ),
+        '#dependency_count' => 2,
+      );
+
+      $tokenOptions = $this->getTokenOptions();
+
+      foreach ($parameterInfo as $name => $info) {
+        $form['parameters'][$name . ':' . $info['type']] = array(
+          '#type' => 'select',
+          '#title' => $name,
+          '#options' => $tokenOptions,
+          '#default_value' => $parameters[$name . ':' . $info['type']],
+          '#dependency' => array(
+            $dom_id . '-selected' => array(1),
+            $dom_id . '-provide-parameters' => array(1),
+          ),
+          '#dependency_count' => 2,
+        );
+      }
+    }
+
+    return $form;
+  }
+
+  /**
    * Executes the selected operation on the provided data.
    *
    * @param $data
@@ -122,8 +304,13 @@ class ViewsBulkOperationsRulesComponent extends ViewsBulkOperationsBaseOperation
       $element = $this->rulesElement;
     }
     else {
-     $element = rules_action('component_' . $this->operationInfo['parameters']['component_key']);
+      $element = rules_action('component_' . $this->operationInfo['parameters']['component_key']);
+    }
+    if (array_key_exists('parameters', $context) && is_array($context['parameters'])) {
+      $element->executeByArgs(array_merge(is_array($data) ? $data : array($data), $context['parameters']));
+    }
+    else {
+      $element->execute($data);
     }
-    $element->execute($data);
   }
 }
diff --git a/views/views_bulk_operations_handler_field_operations.inc b/views/views_bulk_operations_handler_field_operations.inc
index 9bb983f..6069f71 100644
--- a/views/views_bulk_operations_handler_field_operations.inc
+++ b/views/views_bulk_operations_handler_field_operations.inc
@@ -137,7 +137,7 @@ class views_bulk_operations_handler_field_operations extends views_handler_field
 
     $entity_type = $this->get_entity_type();
     $options = $this->options['vbo_operations'];
-    foreach (views_bulk_operations_get_applicable_operations($entity_type, $options) as $operation_id => $operation) {
+    foreach (views_bulk_operations_get_applicable_operations($entity_type, $options, $this) as $operation_id => $operation) {
       $operation_options = !empty($options[$operation_id]) ? $options[$operation_id] : array();
 
       $dom_id = 'edit-options-vbo-operations-' . str_replace(array('_', ':'), array('-', ''), $operation_id);
@@ -272,7 +272,7 @@ class views_bulk_operations_handler_field_operations extends views_handler_field
           continue;
         }
 
-        $operation = views_bulk_operations_get_operation($operation_id, $entity_type, $options);
+        $operation = views_bulk_operations_get_operation($operation_id, $entity_type, $options, $this);
         if (!$operation || !$operation->access($user)) {
           continue;
         }
diff --git a/views_bulk_operations.module b/views_bulk_operations.module
index 0d9ab70..39d7cd7 100644
--- a/views_bulk_operations.module
+++ b/views_bulk_operations.module
@@ -210,8 +210,10 @@ function views_bulk_operations_get_operation_info($operation_id = NULL) {
  *   The entity type on which the operation operates.
  * @param $options
  *   Options for this operation (label, operation settings, etc.)
+ * @param $operations_field
+ *   The field the operation is requested from
  */
-function views_bulk_operations_get_operation($operation_id, $entity_type, $options) {
+function views_bulk_operations_get_operation($operation_id, $entity_type, $options, $operations_field) {
   $operations = &drupal_static(__FUNCTION__);
 
   if (!isset($operations[$operation_id])) {
@@ -223,7 +225,7 @@ function views_bulk_operations_get_operation($operation_id, $entity_type, $optio
     $operation_info = $plugin['list callback']($operation_id);
 
     if ($operation_info) {
-      $operations[$operation_id] = new $plugin['handler']['class']($operation_id, $entity_type, $operation_info, $options);
+      $operations[$operation_id] = new $plugin['handler']['class']($operation_id, $entity_type, $operation_info, $options, $operations_field);
     }
     else {
       $operations[$operation_id] = FALSE;
@@ -241,13 +243,15 @@ function views_bulk_operations_get_operation($operation_id, $entity_type, $optio
  * @param $options
  *   An array of options for all operations, in the form of
  *   $operation_id => $operation_options.
+ * @param $operations_field
+ *   The field the operation is requested from
  */
-function views_bulk_operations_get_applicable_operations($entity_type, $options) {
+function views_bulk_operations_get_applicable_operations($entity_type, $options, $operations_field) {
   $operations = array();
   foreach (views_bulk_operations_get_operation_info() as $operation_id => $operation_info) {
     if ($operation_info['type'] == $entity_type || $operation_info['type'] == 'entity' || $operation_info['type'] == 'system') {
       $options[$operation_id] = !empty($options[$operation_id]) ? $options[$operation_id] : array();
-      $operations[$operation_id] = views_bulk_operations_get_operation($operation_id, $entity_type, $options[$operation_id]);
+      $operations[$operation_id] = views_bulk_operations_get_operation($operation_id, $entity_type, $options[$operation_id], $operations_field);
     }
   }
 
@@ -665,8 +669,8 @@ function views_bulk_operations_form_submit($form, &$form_state) {
       $form_state['select_all_pages'] = $form_state['values']['select_all'];
 
       $options = $vbo->get_operation_options($form_state['values']['operation']);
-      $form_state['operation'] = $operation = views_bulk_operations_get_operation($form_state['values']['operation'], $entity_type, $options);
-      if (!$operation->configurable() && $operation->getAdminOption('skip_confirmation')) {
+      $form_state['operation'] = $operation = views_bulk_operations_get_operation($form_state['values']['operation'], $entity_type, $options, $vbo);
+      if (!$operation->configurable($vbo) && $operation->getAdminOption('skip_confirmation')) {
         break; // Go directly to execution
       }
       $form_state['step'] = $operation->configurable() ? 'views_bulk_operations_config_form' : 'views_bulk_operations_confirm_form';
@@ -751,6 +755,13 @@ function views_bulk_operations_execute($vbo, $operation, $selection, $select_all
       'exposed_input' => $vbo->view->get_exposed_input(),
     ),
   );
+  if ($operation->getAdminOption('provide_parameters', FALSE)) {
+    $parameters = $operation->getAdminOption('parameters', array());
+    foreach (array_keys($parameters) as $parameter) {
+        $parameter_value = $vbo->tokenize_value($parameters[$parameter]);
+        $options['parameters'][$parameter] = $parameter_value;
+    }
+  }
   // Create an array of rows in the needed format.
   $rows = array();
   $current = 1;
@@ -1061,6 +1072,9 @@ function views_bulk_operations_queue_item_process($queue_item_data, &$log = NULL
     if ($operation->needsRows()) {
       $operation_context['rows'] = array($row_index => $row['views_row']);
     }
+    if ($operation->getAdminOption('provide_parameters', FALSE)) {
+      $operation_context['parameters'] = $options['parameters'];
+    }
     $operation->execute($entity, $operation_context);
 
     unset($row_group[$row_index]);
@@ -1145,6 +1159,9 @@ function views_bulk_operations_direct_process($operation, $rows, $options) {
           $operation_context['rows'][$row_index] = $row['views_row'];
         }
       }
+      if ($operation->getAdminOption('provide_parameters', FALSE)) {
+        $operation_context['parameters'] = $options['parameters'];
+      }
       $operation->execute($entities, $operation_context);
     }
   }
