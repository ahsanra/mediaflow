diff --git a/views/views_bulk_operations_handler_field_operations.inc b/views/views_bulk_operations_handler_field_operations.inc
index 1fdb60d..4079adb 100644
--- a/views/views_bulk_operations_handler_field_operations.inc
+++ b/views/views_bulk_operations_handler_field_operations.inc
@@ -57,6 +57,7 @@ class views_bulk_operations_handler_field_operations extends views_handler_field
         'enable_select_all_pages' => array('default' => TRUE),
         'force_single' => array('default' => FALSE),
         'entity_load_capacity' => array('default' => 10),
+        'skip_batching' => array('default' => 0),
       ),
     );
     $options['vbo_operations'] = array(
@@ -118,6 +119,12 @@ class views_bulk_operations_handler_field_operations extends views_handler_field
       '#description' => t("Improve execution performance at the cost of memory usage. Set to '1' if you're having problems."),
       '#default_value' => $this->options['vbo_settings']['entity_load_capacity'],
     );
+    $form['vbo_settings']['skip_batching'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Skip batching'),
+      '#default_value' => $this->options['vbo_settings']['skip_batching'],
+      '#description' => '<b>' . t('Warning') . '</b>: ' . t('This WILL cause timeouts for any larger amount of selected values!'),
+    );
 
     // Display operations and their settings.
     $form['vbo_operations'] = array(
diff --git a/views_bulk_operations.module b/views_bulk_operations.module
index 3783da9..b9c3f4e 100644
--- a/views_bulk_operations.module
+++ b/views_bulk_operations.module
@@ -769,8 +769,11 @@ function views_bulk_operations_execute($vbo, $operation, $selection, $select_all
     }
   }
 
-  // Aggregate operations can only be executed directly.
-  if ($operation->aggregate()) {
+  // Skip batching and execute directly if needed.
+  $aggregate = $operation->aggregate();
+  $skip_batching = $vbo->get_vbo_option('skip_batching');
+  $force_single = $vbo->get_vbo_option('force_single');
+  if ($aggregate || $skip_batching || $force_single) {
     views_bulk_operations_direct_process($operation, $rows, $options);
     return;
   }
@@ -1097,10 +1100,10 @@ function views_bulk_operations_direct_adjust(&$selection, $vbo) {
 
 /**
  * Processes the passed rows directly (without batching and queueing).
- *
- * This is a legacy function that is now only used for aggregate operations.
  */
 function views_bulk_operations_direct_process($operation, $rows, $options) {
+  global $user;
+
   drupal_set_time_limit(0);
 
   // Prepare an array of status information. Imitates the Batch API naming
@@ -1109,44 +1112,56 @@ function views_bulk_operations_direct_process($operation, $rows, $options) {
   $context['results']['progress'] = 0;
   $context['results']['log'] = array();
 
-  $entity_type = $operation->entityType;
-  $entity_ids = array();
-  foreach ($rows as $row_index => $row) {
-    $entity_ids[] = $row['entity_id'];
-  }
-  $entities = _views_bulk_operations_entity_load($entity_type, $entity_ids, $options['revision']);
-
-  foreach ($entities as $id => $entity) {
-    if (!_views_bulk_operations_entity_access($operation, $entity_type, $entity)) {
-      $context['results']['log'][] = t('Skipped %operation on @type %title due to insufficient permissions.', array(
-        '%operation' => $operation->label(),
-        '@type' => $entity_type,
-        '%title' => _views_bulk_operations_entity_label($entity_type, $entity),
-      ));
-      unset($entities[$id]);
+  if ($operation->aggregate()) {
+    // Load all entities.
+    $entity_type = $operation->entityType;
+    $entity_ids = array();
+    foreach ($rows as $row_index => $row) {
+      $entity_ids[] = $row['entity_id'];
+    }
+    $entities = _views_bulk_operations_entity_load($entity_type, $entity_ids, $options['revision']);
+
+    // Filter out entities that can't be accessed.
+    foreach ($entities as $id => $entity) {
+      if (!_views_bulk_operations_entity_access($operation, $entity_type, $entity)) {
+        $context['results']['log'][] = t('Skipped %operation on @type %title due to insufficient permissions.', array(
+          '%operation' => $operation->label(),
+          '@type' => $entity_type,
+          '%title' => _views_bulk_operations_entity_label($entity_type, $entity),
+        ));
+        unset($entities[$id]);
+      }
     }
-  }
-  if (empty($entities)) {
-    return;
-  }
 
-  // Pass the selected rows to the operation if needed.
-  $operation_context = array(
-    'view_info' => $options['view_info'],
-  );
-  if ($operation->needsRows()) {
-    $operation_context['rows'] = array();
-    foreach ($rows as $row_index => $row) {
-      $operation_context['rows'][$row_index] = $row['views_row'];
+    // If there are any entities left, execute the operation on them.
+    if ($entities) {
+      $operation_context = array(
+        'view_info' => $options['view_info'],
+      );
+      // Pass the selected rows to the operation if needed.
+      if ($operation->needsRows()) {
+        $operation_context['rows'] = array();
+        foreach ($rows as $row_index => $row) {
+          $operation_context['rows'][$row_index] = $row['views_row'];
+        }
+      }
+      $operation->execute($entities, $operation_context);
     }
   }
-  $operation->execute($entities, $operation_context);
+  else {
+    // Imitate a queue and process the entities one by one.
+    $queue_item_data = array(
+      'uid' => $user->uid,
+      'arguments' => array($rows, $operation, $options),
+    );
+    views_bulk_operations_queue_item_process($queue_item_data, $context['results']['log']);
+  }
 
-  $context['results']['log'][] = t('Performed aggregate %operation on @items.', array(
+  $context['results']['progress'] += count($rows);
+  $context['results']['log'][] = t('Performed %operation on @items.', array(
     '%operation' => $operation->label(),
-    '@items' => format_plural(count($entities), '1 item', '@count items'),
+    '@items' => format_plural(count($rows), '1 item', '@count items'),
   ));
-  $context['results']['progress'] += count($entities);
 
   views_bulk_operations_execute_finished(TRUE, $context['results'], array());
 }
