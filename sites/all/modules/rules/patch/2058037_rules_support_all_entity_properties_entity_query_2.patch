diff --git a/modules/entity.eval.inc b/modules/entity.eval.inc
index 0f4c36a..0bea469 100644
--- a/modules/entity.eval.inc
+++ b/modules/entity.eval.inc
@@ -65,7 +65,7 @@ function rules_action_entity_query_info_alter(&$element_info, RulesAbstractPlugi
     $element_info['parameter']['property']['options list'] = 'rules_action_entity_query_property_options_list';
 
     if ($element->settings['property']) {
-      $wrapper = entity_metadata_wrapper($element->settings['type']);
+      $wrapper = rules_get_entity_metadata_wrapper_all_properties($element);
       if (isset($wrapper->{$element->settings['property']}) && $property = $wrapper->{$element->settings['property']}) {
         $element_info['parameter']['value']['type'] = $property->type();
         $element_info['parameter']['value']['options list']  = $property->optionsList() ? 'rules_action_entity_query_value_options_list' : FALSE;
diff --git a/modules/entity.rules.inc b/modules/entity.rules.inc
index 76ec4ee..e25a1ec 100644
--- a/modules/entity.rules.inc
+++ b/modules/entity.rules.inc
@@ -227,7 +227,7 @@ function rules_action_entity_query_value_options_list(RulesAbstractPlugin $eleme
   // Get the possible values for the selected property.
   $element->settings += array('type' => NULL, 'property' => NULL);
   if ($element->settings['type'] && $element->settings['property']) {
-    $wrapper = entity_metadata_wrapper($element->settings['type']);
+    $wrapper = rules_get_entity_metadata_wrapper_all_properties($element);
 
     if (isset($wrapper->{$element->settings['property']}) && $property = $wrapper->{$element->settings['property']}) {
       return $property->optionsList('view');
diff --git a/rules.module b/rules.module
index feb1f57..bfa1dfb 100644
--- a/rules.module
+++ b/rules.module
@@ -1607,3 +1607,24 @@ function rules_tokens($type, $tokens, $data, $options = array()) {
     return entity_token_tokens('struct', $tokens, array('struct' => $wrapper), $options);
   }
 }
+
+/**
+ * Helper function that retrieves a metadata wrapper with all properties.
+ *
+ * Note that without this helper, bundle-specific properties aren't added.
+ */
+function rules_get_entity_metadata_wrapper_all_properties(RulesAbstractPlugin $element) {
+  return entity_metadata_wrapper($element->settings['type'], NULL, array(
+    'property info alter' => 'rules_entity_metadata_wrapper_all_properties_callback',
+  ));
+}
+
+/**
+ * Callback that returns a metadata wrapper with all properties.
+ */
+function rules_entity_metadata_wrapper_all_properties_callback(EntityMetadataWrapper $wrapper, $property_info) {
+  $info = $wrapper->info();
+  $properties = entity_get_all_property_info($info['type']);
+  $property_info['properties'] += $properties;
+  return $property_info;
+}
